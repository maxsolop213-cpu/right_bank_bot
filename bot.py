import telebot
import gspread
from google.oauth2.service_account import Credentials
from dotenv import load_dotenv
from flask import Flask, request
import os

# ---------- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ----------
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")

scope = ["https://www.googleapis.com/auth/spreadsheets.readonly"]
creds = Credentials.from_service_account_file("service_account.json", scopes=scope)
client = gspread.authorize(creds)

MAIN_SHEET_ID = os.getenv("SPREADSHEET_ID")
sheet = client.open_by_key(MAIN_SHEET_ID)
users_ws = sheet.worksheet("Users")

bot = telebot.TeleBot(BOT_TOKEN)

# ---------- –§–£–ù–ö–¶–Ü–á ----------

def get_user_data(user_id):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–±–ª–∏—Ü—ñ Users"""
    users = users_ws.get_all_records()
    for user in users:
        if str(user_id) == str(user["Telegram_ID"]):
            return user
    return None

# ---------- –ö–û–ú–ê–ù–î–ê /start ----------

@bot.message_handler(commands=["start"])
def start(message):
    user_id = message.from_user.id
    user = get_user_data(user_id)

    if not user:
        bot.reply_to(message, "‚ö†Ô∏è –¢–µ–±–µ –Ω–µ–º–∞—î –≤ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤. –ó–≤–µ—Ä–Ω–∏—Å—å –¥–æ –∫–µ—Ä—ñ–≤–Ω–∏–∫–∞.")
        return

    role = user["–†–æ–ª—å"]
    name = user["–Ü–º‚Äô—è"]
    bot.reply_to(message, f"üëã –ü—Ä–∏–≤—ñ—Ç, {name}! –¢–≤–æ—è —Ä–æ–ª—å: {role}")

    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        "üó∫ –ö–∞—Ä—Ç–∞ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π", "üìã –ü–ª–∞–Ω", "üéØ –§–æ–∫—É—Å–∏",
        "‚úÖ –ó–∞–¥–∞—á—ñ", "üéÅ –ü—Ä–æ–º–æ", "üí∞ –ú–§",
        "üõ† –°–µ—Ä–≤—ñ—Å-C", "‚öôÔ∏è –°–µ—Ä–≤—ñ—Å-–•", "üå± –†–æ–∑–≤–∏—Ç–æ–∫ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π"
    ]
    for b in buttons:
        markup.add(b)

    bot.send_message(message.chat.id, "–í–∏–±–µ—Ä–∏ —Ä–æ–∑–¥—ñ–ª üëá", reply_markup=markup)

# ---------- –û–ë–†–û–ë–ö–ê –ö–ù–û–ü–û–ö ----------

@bot.message_handler(func=lambda message: True)
def handle_buttons(message):
    user_id = message.from_user.id
    user = get_user_data(user_id)

    if not user:
        bot.reply_to(message, "‚ö†Ô∏è –¢–µ–±–µ –Ω–µ–º–∞—î –≤ –±–∞–∑—ñ.")
        return

    text = message.text.strip().lower()

    # –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è emoji —ñ –Ω–∞–∑–≤
    def normalize(s):
        return (
            s.lower()
            .replace("üó∫", "üó∫")
            .replace("üìã", "")
            .replace("üéØ", "")
            .replace("‚úÖ", "")
            .replace("üéÅ", "")
            .replace("üí∞", "")
            .replace("üõ†", "")
            .replace("‚öôÔ∏è", "")
            .replace("üå±", "")
            .strip()
        )

    matched_column = None
    for col_name in user.keys():
        if normalize(text) in normalize(col_name):
            matched_column = col_name
            break

    if matched_column:
        link = str(user[matched_column]).strip()
        if link.startswith("http://") or link.startswith("https://"):
            # –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–ø—Ä–∞–≤–ª—è—î–º–æ Google Maps MyMaps URL
            if "google.com/maps/d/" in link:
                if "edit" in link:
                    link = link.replace("edit?", "viewer?")
                elif "viewer" not in link:
                    link = link.replace("d/", "d/viewer?")
            bot.send_message(message.chat.id, f"üîó {matched_column}:\n{link}")
        elif link == "" or link.lower() == "none":
            bot.send_message(message.chat.id, f"‚õîÔ∏è –î–ª—è '{matched_column}' —â–µ –Ω–µ–º–∞—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è.")
        else:
            bot.send_message(message.chat.id, f"‚ö†Ô∏è –î–ª—è '{matched_column}' –∑–∞–ø–∏—Å–∞–Ω–æ —Ç–µ–∫—Å—Ç, –∞–ª–µ —Ü–µ –Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è.")
    else:
        bot.send_message(message.chat.id, "‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏.")

# ---------- –í–ï–ë–•–£–ö –î–õ–Ø RENDER ----------
app = Flask(name)

@app.route(f'/{BOT_TOKEN}', methods=['POST'])
def webhook():
    json_str = request.get_data().decode('UTF-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "!", 200

@app.route('/')
def home():
    return "Bot is running", 200

if __name__ == "__main__":
    import requests
    url = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{BOT_TOKEN}"
    bot.remove_webhook()
    bot.set_webhook(url=url)
    print(f"‚úÖ –í–µ–±—Ö—É–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {url}")
    app.run(host="0.0.0.0", port=5000)
  
