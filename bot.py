import telebot
import gspread
from google.oauth2.service_account import Credentials
from dotenv import load_dotenv
import os
import json
from flask import Flask, request

# ---------- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ----------
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
MAIN_SHEET_ID = os.getenv("SPREADSHEET_ID")

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è Google Sheets —á–µ—Ä–µ–∑ ENV
scope = ["https://www.googleapis.com/auth/spreadsheets.readonly"]
creds = Credentials.from_service_account_info(json.loads(os.getenv("GOOGLE_CREDENTIALS")), scopes=scope)
client = gspread.authorize(creds)
sheet = client.open_by_key(MAIN_SHEET_ID)
users_ws = sheet.worksheet("Users")

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# ---------- –ú–û–¢–ò–í–ê–¶–Ü–ô–ù–Ü –§–†–ê–ó–ò ----------
MOTIVATION = [
    "üöÄ –ö—Ä–æ–∫ –∑–∞ –∫—Ä–æ–∫–æ–º –¥–æ –ø–µ—Ä–µ–º–æ–≥–∏!",
    "üî• –¢–∏ —Ä–æ–±–∏—à –≤—ñ–¥–º—ñ–Ω–Ω—É —Ä–æ–±–æ—Ç—É!",
    "üí™ –ó –∫–æ–∂–Ω–∏–º –¥–Ω–µ–º –±–ª–∏–∂—á–µ –¥–æ —Ü—ñ–ª—ñ!",
    "üåü –ü–∞–º‚Äô—è—Ç–∞–π ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –¥–æ —Ç–∏—Ö, —Ö—Ç–æ –Ω–µ –∑–¥–∞—î—Ç—å—Å—è!"
]

# ---------- –§–£–ù–ö–¶–Ü–á ----------
def get_user_data(user_id):
    users = users_ws.get_all_records()
    for user in users:
        if str(user_id) == str(user["Telegram_ID"]):
            return user
    return None


def normalize_url(url):
    if not url:
        return None
    return url.replace("/edit", "/viewer")


# ---------- –ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ ----------
@bot.message_handler(commands=["start"])
def start(message):
    user_id = message.from_user.id
    user = get_user_data(user_id)

    if not user:
        bot.reply_to(message, "‚ö†Ô∏è –¢–µ–±–µ –Ω–µ–º–∞—î –≤ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤. –ó–≤–µ—Ä–Ω–∏—Å—å –¥–æ –∫–µ—Ä—ñ–≤–Ω–∏–∫–∞.")
        return

    name = user["–Ü–º‚Äô—è"]
    role = user["–†–æ–ª—å"]

    bot.send_message(message.chat.id, f"üëã –ü—Ä–∏–≤—ñ—Ç, {name}! –¢–≤–æ—è —Ä–æ–ª—å: {role}")

    # –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üåç –¢–µ—Ä–∏—Ç–æ—Ä—ñ—è", "üß∞ –°–µ—Ä–≤—ñ—Å–∏", "üéØ –§–æ–∫—É—Å–∏")

    import random
    bot.send_message(message.chat.id, random.choice(MOTIVATION))
    bot.send_message(message.chat.id, "–í–∏–±–µ—Ä–∏ —Ä–æ–∑–¥—ñ–ª üëá", reply_markup=markup)


# ---------- –ü–Ü–î–ú–ï–ù–Æ: –¢–ï–†–ò–¢–û–†–Ü–Ø ----------
@bot.message_handler(func=lambda message: message.text == "üåç –¢–µ—Ä–∏—Ç–æ—Ä—ñ—è")
def territory_menu(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üìã –ü–ª–∞–Ω", "üìä –Ü–Ω–¥–µ–∫—Å–∏", "üóì –í—ñ–∑–∏—Ç–∏", "‚úÖ –ó–∞–¥–∞—á—ñ", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "üìç –û–±–µ—Ä–∏ –Ω–∞–ø—Ä—è–º –ø–æ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó:", reply_markup=markup)


# ---------- –ü–Ü–î–ú–ï–ù–Æ: –°–ï–†–í–Ü–°–ò ----------
@bot.message_handler(func=lambda message: message.text == "üß∞ –°–µ—Ä–≤—ñ—Å–∏")
def services_menu(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üõ† –°–µ—Ä–≤—ñ—Å-C", "‚öôÔ∏è –°–µ—Ä–≤—ñ—Å-–•", "üéÅ –ü—Ä–æ–º–æ", "üí∞ –ú–§", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "üß∞ –û–±–µ—Ä–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Å–µ—Ä–≤—ñ—Å:", reply_markup=markup)


# ---------- –ü–Ü–î–ú–ï–ù–Æ: –§–û–ö–£–°–ò ----------
@bot.message_handler(func=lambda message: message.text == "üéØ –§–æ–∫—É—Å–∏")
def focuses_menu(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üå± –†–æ–∑–≤–∏—Ç–æ–∫ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "üéØ –§–æ–∫—É—Å–∏ –º—ñ—Å—è—Ü—è —Ç–∞ —Ä–æ–∑–≤–∏—Ç–æ–∫ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π:", reply_markup=markup)


# ---------- –ü–û–í–ï–†–ù–ï–ù–ù–Ø –ù–ê–ó–ê–î ----------
@bot.message_handler(func=lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def back_to_main(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üåç –¢–µ—Ä–∏—Ç–æ—Ä—ñ—è", "üß∞ –°–µ—Ä–≤—ñ—Å–∏", "üéØ –§–æ–∫—É—Å–∏")
    bot.send_message(message.chat.id, "üè† –ü–æ–≤–µ—Ä–Ω—É–≤—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=markup)


# ---------- –û–ë–†–û–ë–ö–ê –ö–ù–û–ü–û–ö –Ü –í–Ü–î–ö–†–ò–¢–¢–Ø –õ–Ü–ù–ö–Ü–í ----------
@bot.message_handler(func=lambda message: True)
def handle_buttons(message):
    user_id = message.from_user.id
    user = get_user_data(user_id)

    if not user:
        bot.reply_to(message, "‚ö†Ô∏è –¢–µ–±–µ –Ω–µ–º–∞—î –≤ –±–∞–∑—ñ.")
        return

    column = message.text.strip()
    if column == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        back_to_main(message)
        return

    url = user.get(column)
    if not url:
        bot.send_message(message.chat.id, f"‚õîÔ∏è –î–ª—è '{column}' —â–µ –Ω–µ–º–∞—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è.")
        return

clean_url = normalize_url(url)
    bot.send_message(message.chat.id, f"üîó {column}:\n{clean_url}")


# ---------- –í–ï–ë–•–£–ö –î–õ–Ø RENDER ----------
@app.route(f'/{BOT_TOKEN}', methods=['POST'])
def webhook():
    json_str = request.get_data().decode('UTF-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "!", 200


@app.route('/')
def home():
    return "Bot is running", 200


# ---------- –ó–ê–ü–£–°–ö ----------
if __name__ == "__main__":
    import requests
    url = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{BOT_TOKEN}"
    bot.remove_webhook()
    bot.set_webhook(url=url)
    print(f"‚úÖ –í–µ–±—Ö—É–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {url}")
    app.run(host="0.0.0.0", port=5000)
