import telebot
import gspread
from google.oauth2.service_account import Credentials
from dotenv import load_dotenv
from flask import Flask, request
import os
import json
import random
import threading
import time as time_module
from datetime import datetime, time as dtime
import pytz
import re

# ---------- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ----------
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
MAIN_SHEET_ID = os.getenv("SPREADSHEET_ID")
GOOGLE_CREDENTIALS = os.getenv("GOOGLE_CREDENTIALS")

ADMIN_ID = 6851674667
TM_IDS = [6851674667, 6833216700]
PHOTO_GROUP_ID = -1003236605419  # üì∏ ID –≥—Ä—É–ø–∏ –∑ —Ñ–æ—Ç–æ

scope = ["https://www.googleapis.com/auth/spreadsheets"]
creds = Credentials.from_service_account_info(json.loads(GOOGLE_CREDENTIALS), scopes=scope)
client = gspread.authorize(creds)
sheet = client.open_by_key(MAIN_SHEET_ID)
users_ws = sheet.worksheet("Users")
photo_ws = sheet.worksheet("PhotoStats")

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# ---------- –ú–û–¢–ò–í–ê–¶–Ü–Ø ----------
MOTIVATION_DAILY = [
    "üíº –ì–∞—Ä–Ω–æ–≥–æ –π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è!",
    "üöÄ –§–æ–∫—É—Å —ñ –¥—ñ—è! –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è!",
    "‚ö°Ô∏è –°–∏–ª—å–Ω–∏–π —Å—Ç–∞—Ä—Ç = —Å–∏–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è!",
    "üìà –ú–∞–ª–µ–Ω—å–∫—ñ –∫—Ä–æ–∫–∏ —â–æ–¥–Ω—è ‚Äî –≤–µ–ª–∏–∫—ñ –ø–µ—Ä–µ–º–æ–≥–∏. –£—Å–ø—ñ—Ö—ñ–≤!",
    "üéØ –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—è ‚Üí —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!",
    "üß† –ü–ª–∞–Ω—É–π —ñ —Ä–æ–±–∏. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Å—å–æ–≥–æ–¥–Ω—ñ!",
    "üî• –¢–≤—ñ–π —Ä–∏—Ç–º ‚Äî —Ç–≤–æ—è –ø–µ—Ä–µ–≤–∞–≥–∞. –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è!",
    "üèÅ –ü–æ—á–∏–Ω–∞–π —á—ñ—Ç–∫–æ, –∑–∞–≤–µ—Ä—à—É–π –≤–ø–µ–≤–Ω–µ–Ω–æ. –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!",
    "üåü –¢—ñ–ª—å–∫–∏ –≤–ø–µ—Ä–µ–¥. –ù–µ—Ö–∞–π –¥–µ–Ω—å –±—É–¥–µ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–º!",
    "‚úÖ –î—ñ—î–º–æ –±–µ–∑ –≤—ñ–¥–∫–ª–∞–¥–∞–Ω—å. –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è!"
]

# ---------- –•–ï–õ–ü–ï–†–ò ----------
def get_user_data(user_id):
    users = users_ws.get_all_records()
    for user in users:
        if str(user_id) == str(user.get("Telegram_ID", "")).strip():
            return user
    return None


def normalize_url(url):
    if not url:
        return None
    return url.replace("/edit", "/viewer")


def all_user_chat_ids():
    rows = users_ws.get_all_records()
    ids = []
    for r in rows:
        tid = str(r.get("Telegram_ID", "")).strip()
        if tid.isdigit():
            ids.append(int(tid))
    return ids


def is_tm_or_admin(user_id):
    """–í–∏–∑–Ω–∞—á–∞—î, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î —Ä–æ–ª—å –¢–ú –∞–±–æ Admin"""
    user = get_user_data(user_id)
    if not user:
        return False
    role = str(user.get("–†–æ–ª—å", "")).lower()
    return role in ["tm", "—Ç–º", "admin", "–∞–¥–º—ñ–Ω"] or user_id in TM_IDS or user_id == ADMIN_ID


# ---------- –ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ ----------
@bot.message_handler(commands=["start"])
def start(message):
    user_id = message.from_user.id
    user = get_user_data(user_id)
    if not user:
        bot.reply_to(message, "‚ö†Ô∏è –¢–µ–±–µ –Ω–µ–º–∞—î –≤ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤. –ó–≤–µ—Ä–Ω–∏—Å—å –¥–æ –∫–µ—Ä—ñ–≤–Ω–∏–∫–∞.")
        return

    name = user.get("–Ü–º‚Äô—è", "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á")
    bot.send_message(message.chat.id, f"üëã –ü—Ä–∏–≤—ñ—Ç, {name}! {random.choice(MOTIVATION_DAILY)}")

    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üó∫ –¢–µ—Ä–∏—Ç–æ—Ä—ñ—è", "üß© –°–µ—Ä–≤—ñ—Å–∏")
    markup.add("üéØ –§–æ–∫—É—Å–∏", "üìö –ó–Ω–∞–Ω–Ω—è")

    if is_tm_or_admin(user_id):
        markup.add("üìä Check Foto", "üì® –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö", "üéØ –§–æ–∫—É—Å –¥–Ω—è (–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è)")

    bot.send_message(message.chat.id, "–í–∏–±–µ—Ä–∏ —Ä–æ–∑–¥—ñ–ª üëá", reply_markup=markup)


# ---------- –ü–Ü–î–ú–ï–ù–Æ ----------
@bot.message_handler(func=lambda msg: msg.text == "üó∫ –¢–µ—Ä–∏—Ç–æ—Ä—ñ—è")
def territory_menu(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üó∫ –ö–∞—Ä—Ç–∞ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π")
    markup.add("üìã –ü–ª–∞–Ω", "üìä –Ü–Ω–¥–µ–∫—Å–∏", "üìÖ –í—ñ–∑–∏—Ç–∏", "‚úÖ –ó–∞–¥–∞—á—ñ")
    markup.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "üìç –¢–µ—Ä–∏—Ç–æ—Ä—ñ—è:", reply_markup=markup)

–ú–∞–∫—Å–∏–º –°–æ–ª–æ–ø, [28.10.2025 17:23]
@bot.message_handler(func=lambda msg: msg.text == "üß© –°–µ—Ä–≤—ñ—Å–∏")
def services_menu(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üõ† –°–µ—Ä–≤—ñ—Å-C", "‚öôÔ∏è –°–µ—Ä–≤—ñ—Å-–•", "üëë Premium Club", "üí∞ –ú–§")
    markup.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "üß© –°–µ—Ä–≤—ñ—Å–∏:", reply_markup=markup)
@bot.message_handler(func=lambda msg: msg.text == "üéØ –§–æ–∫—É—Å–∏")
def focus_menu(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üéØ –§–æ–∫—É—Å–∏ –º—ñ—Å—è—Ü—è", "üå± –†–æ–∑–≤–∏—Ç–æ–∫ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π", "üéÅ –ü—Ä–æ–º–æ", "üéØ –§–æ–∫—É—Å –¥–Ω—è")
    markup.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "üéØ –§–æ–∫—É—Å–∏:", reply_markup=markup)


@bot.message_handler(func=lambda msg: msg.text == "üìö –ó–Ω–∞–Ω–Ω—è")
def knowledge_menu(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üìñ –ë–∞–∑–∞ –∑–Ω–∞–Ω—å", "üíé JET")
    markup.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "üìö –ó–Ω–∞–Ω–Ω—è:", reply_markup=markup)


# ---------- –ö–ï–†–Ü–í–ù–ò–¶–¨–ö–Ü –û–ü–û–í–Ü–©–ï–ù–ù–Ø ----------
@bot.message_handler(func=lambda msg: msg.text == "üì® –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö")
def notify_update(message):
    if message.from_user.id != ADMIN_ID:
        return
    for cid in all_user_chat_ids():
        try:
            bot.send_message(cid, "üì¢ –î–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ! –ü–µ—Ä–µ–≤—ñ—Ä —Ç–∞–±–ª–∏—Ü—ñ —Ç–∞ –ø—Ä–∞—Ü—é–π –∑ –∞–∫—Ç—É–∞–ª—å–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é.")
        except Exception:
            pass
    bot.send_message(message.chat.id, "‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.")


@bot.message_handler(func=lambda msg: msg.text == "üéØ –§–æ–∫—É—Å –¥–Ω—è (–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è)")
def notify_focus_day(message):
    if message.from_user.id != ADMIN_ID:
        return
    for cid in all_user_chat_ids():
        try:
            bot.send_message(cid, "üéØ –ü–µ—Ä–µ–≤—ñ—Ä —Ñ–æ–∫—É—Å –¥–Ω—è! –ó–æ—Å–µ—Ä–µ–¥—å—Å—è –Ω–∞ –≥–æ–ª–æ–≤–Ω–∏—Ö –Ω–∞–ø—Ä—è–º–∫–∞—Ö —Å—å–æ–≥–æ–¥–Ω—ñ.")
        except Exception:
            pass
    bot.send_message(message.chat.id, "‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è '–§–æ–∫—É—Å –¥–Ω—è' —Ä–æ–∑—ñ—Å–ª–∞–Ω–æ.")


# ---------- –ê–ù–ê–õ–Ü–ó –§–û–¢–û-–ö–û–î–Ü–í ----------
photo_data = {}

@bot.message_handler(func=lambda m: m.chat.id == PHOTO_GROUP_ID and not (m.text and m.text.startswith('/')))
def handle_photo_group_message(message):
    text_content = message.text or message.caption  # ‚úÖ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –ø—ñ–¥–ø–∏—Å—ñ–≤ –¥–æ —Ñ–æ—Ç–æ
    uid = str(message.from_user.id)
    name = message.from_user.first_name or message.from_user.username or "–ù–µ–≤—ñ–¥–æ–º–∏–π"
    tz = pytz.timezone("Europe/Kyiv")
    now = datetime.now(tz).strftime("%H:%M:%S")

    if uid not in photo_data:
        photo_data[uid] = {"name": name, "times": [], "no_caption": 0}

    # —è–∫—â–æ —Ñ–æ—Ç–æ –±–µ–∑ –ø—ñ–¥–ø–∏—Å—É
    if message.photo and not message.caption:
        photo_data[uid]["no_caption"] += 1
        return

    if not text_content:
        return

    codes = re.findall(r"\b\d{3,8}\b", text_content)
    if not codes:
        return

    photo_data[uid]["times"].append(now)


def generate_photo_stats_text():
    tz = pytz.timezone("Europe/Kyiv")
    if not photo_data:
        return "üìä –î–∞–Ω–∏—Ö –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–µ–º–∞—î."
    text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {datetime.now(tz).strftime('%d.%m')}\n"
    all_users = users_ws.get_all_records()
    sent_users = set(photo_data.keys())

    sorted_data = sorted(photo_data.items(), key=lambda x: len(x[1]["times"]), reverse=True)
    for uid, data in sorted_data:
        times = sorted(data["times"])
        if len(times) > 1:
            fmt = "%H:%M:%S"
            diffs = [(datetime.strptime(t2, fmt) - datetime.strptime(t1, fmt)).seconds for t1, t2 in zip(times, times[1:])]
            avg_interval = int(sum(diffs) / len(diffs) / 60)
        else:
            avg_interval = 0
        text += f"\n{data['name']} ‚Äî {len(times)} –∫–æ–¥—ñ–≤\n‚è∞ –ü–æ—á–∞–≤: {times[0] if times else '-'} | –ó–∞–≤–µ—Ä—à–∏–≤: {times[-1] if times else '-'}\nüïê –Ü–Ω—Ç–µ—Ä–≤–∞–ª: ~{avg_interval} —Ö–≤\n"

    # üßæ –•—Ç–æ –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–≤
    missing = [u["–Ü–º‚Äô—è"] for u in all_users if str(u.get("Telegram_ID", "")).strip().isdigit() and str(u["Telegram_ID"]) not in sent_users]
    if missing:
        text += "\n‚ùå –ù–µ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ —Ñ–æ—Ç–æ —Å—å–æ–≥–æ–¥–Ω—ñ:\n" + ", ".join(missing)
    return text

def save_photo_stats_to_sheet():
    for uid, data in photo_data.items():
        times = sorted(data["times"])
        if len(times) > 1:
            fmt = "%H:%M:%S"
            diffs = [(datetime.strptime(t2, fmt) - datetime.strptime(t1, fmt)).seconds for t1, t2 in zip(times, times[1:])]
            avg_interval = int(sum(diffs) / len(diffs) / 60)
        else:
            avg_interval = 0
        photo_ws.append_row([
            data["name"], uid, len(times), times[0] if times else "-", times[-1] if times else "-", avg_interval, data["no_caption"]
        ])
    photo_data.clear()


def send_photo_stats():
    text = generate_photo_stats_text()
    bot.send_message(PHOTO_GROUP_ID, text)
    bot.send_message(PHOTO_GROUP_ID, "‚úÖ –î—è–∫—É—é –≤—Å—ñ–º –∑–∞ —Ä–æ–±–æ—Ç—É —Å—å–æ–≥–æ–¥–Ω—ñ!")
    save_photo_stats_to_sheet()


# ---------- /check_foto –∞–±–æ –∫–Ω–æ–ø–∫–∞ ----------
@bot.message_handler(func=lambda msg: msg.text == "üìä Check Foto" or msg.text == "/check_foto")
def manual_check_foto(message):
    if not is_tm_or_admin(message.from_user.id):
        return
    text = generate_photo_stats_text()
    bot.send_message(message.chat.id, text)


# ---------- –†–û–ó–ö–õ–ê–î (—Ä–∞–Ω–æ–∫/–≤–µ—á—ñ—Ä) ----------
def photo_group_scheduler():
    tz = pytz.timezone("Europe/Kyiv")
    last_morning = None
    last_evening = None
    while True:
        now = datetime.now(tz)
        if now.weekday() <= 4:
            if now.hour == 9 and now.minute == 30 and last_morning != now.date():
                bot.send_message(PHOTO_GROUP_ID, "üì∏ –î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É! –û—á—ñ–∫—É—é –≤–∞—à—ñ —Ñ–æ—Ç–æ —Ç–∞ –∫–æ–¥–∏ üí™")
                last_morning = now.date()
            if now.hour == 19 and now.minute == 0 and last_evening != now.date():
                send_photo_stats()
                last_evening = now.date()
        time_module.sleep(30)


threading.Thread(target=photo_group_scheduler, daemon=True).start()

# ---------- –ü–û–í–ï–†–ù–ï–ù–ù–Ø –î–û –ú–ï–ù–Æ ----------
@bot.message_handler(func=lambda msg: msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
def back_to_main(message):
    start(message)


# ---------- –û–ë–†–û–ë–ö–ê –õ–Ü–ù–ö–Ü–í ----------
SKIP_BTNS = {"üó∫ –¢–µ—Ä–∏—Ç–æ—Ä—ñ—è", "üß© –°–µ—Ä–≤—ñ—Å–∏", "üéØ –§–æ–∫—É—Å–∏", "üìö –ó–Ω–∞–Ω–Ω—è",
              "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üì® –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö", "üéØ –§–æ–∫—É—Å –¥–Ω—è (–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è)", "üìä Check Foto"}


@bot.message_handler(func=lambda msg: msg.text not in SKIP_BTNS)
def handle_links(message):
    user_id = message.from_user.id
    user = get_user_data(user_id)
    if not user:
        bot.reply_to(message, "‚ö†Ô∏è –¢–µ–±–µ –Ω–µ–º–∞—î –≤ –±–∞–∑—ñ.")
        return
    column = message.text.strip()
    url = user.get(column)
    if not url:
        bot.send_message(message.chat.id, f"‚õîÔ∏è –î–ª—è '{column}' —â–µ –Ω–µ–º–∞—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è.")
        return
    bot.send_message(message.chat.id, f"üîó {column}:\n{normalize_url(url)}")


# ---------- –†–ê–ù–ö–û–í–ê –ú–û–¢–ò–í–ê–¶–Ü–Ø ----------
def daily_sender_loop():
    tz = pytz.timezone("Europe/Kyiv")
    last_sent_date = None
    while True:
        now = datetime.now(tz)
        if now.weekday() <= 4 and now.hour == 9 and now.minute == 30:
            today = now.date()
            if last_sent_date != today:
                text = random.choice(MOTIVATION_DAILY)
                for cid in all_user_chat_ids():
                    try:
                        bot.send_message(cid, text)
                    except Exception:
                        pass
                last_sent_date = today
        time_module.sleep(30)


# ---------- FLASK –í–ï–ë–•–£–ö ----------
@app.route(f"/{BOT_TOKEN}", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.data.decode("utf-8"))
    bot.process_new_updates([update])
    return "!", 200


@app.route("/")
def home():
    return "Bot is running", 200

# ---------- –ó–ê–ü–£–°–ö ----------
if __name__ == "__main__":
    threading.Thread(target=daily_sender_loop, daemon=True).start()
    bot.remove_webhook()
    render_host = os.getenv("RENDER_EXTERNAL_HOSTNAME")
    if render_host:
        bot.set_webhook(url=f"https://{render_host}/{BOT_TOKEN}")
        print(f"‚úÖ –í–µ–±—Ö—É–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {render_host}")
    else:
        print("‚ö†Ô∏è RENDER_EXTERNAL_HOSTNAME –Ω–µ –∑–∞–¥–∞–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä ENV —É Render.")
    app.run(host="0.0.0.0", port=5000)
